export declare const connectionManager: {
    activeWalletStore: import("../../reactive/store.js").Store<import("../../exports/wallets.js").Wallet | undefined>;
    activeAccountStore: import("../../reactive/store.js").Store<import("../../exports/wallets.js").Account | undefined>;
    connectedWallets: import("../../reactive/computedStore.js").ReadonlyStore<import("../../exports/wallets.js").Wallet[]>;
    addConnectedWallet: (wallet: import("../../exports/wallets.js").Wallet) => void;
    disconnectWallet: (wallet: import("../../exports/wallets.js").Wallet) => void;
    setActiveWallet: (activeWallet: import("../../exports/wallets.js").Wallet) => Promise<void>;
    connect: (wallet: import("../../exports/wallets.js").Wallet, options?: import("../../exports/react.js").ConnectManagerOptions) => Promise<import("../../exports/wallets.js").Wallet>;
    handleConnection: (wallet: import("../../exports/wallets.js").Wallet, options?: import("../../exports/react.js").ConnectManagerOptions) => Promise<import("../../exports/wallets.js").Wallet>;
    activeWalletChainStore: import("../../reactive/store.js").Store<Readonly<import("../../chains/types.js").ChainOptions & {
        rpc: string;
    }> | undefined>;
    switchActiveWalletChain: (chain: import("../../chains/types.js").Chain) => Promise<void>;
    activeWalletConnectionStatusStore: import("../../reactive/store.js").Store<import("../../exports/wallets.js").ConnectionStatus>;
    isAutoConnecting: import("../../reactive/store.js").Store<boolean>;
    removeConnectedWallet: (wallet: import("../../exports/wallets.js").Wallet) => void;
};
//# sourceMappingURL=index.d.ts.map