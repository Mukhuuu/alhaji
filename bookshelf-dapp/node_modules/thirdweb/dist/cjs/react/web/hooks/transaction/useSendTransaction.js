"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useSendTransaction = useSendTransaction;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_icons_1 = require("@radix-ui/react-icons");
const react_1 = require("react");
const addresses_js_1 = require("../../../../constants/addresses.js");
const units_js_1 = require("../../../../utils/units.js");
const CustomThemeProvider_js_1 = require("../../../core/design-system/CustomThemeProvider.js");
const index_js_1 = require("../../../core/design-system/index.js");
const useSendTransaction_js_1 = require("../../../core/hooks/transaction/useSendTransaction.js");
const RootElementContext_js_1 = require("../../../core/providers/RootElementContext.js");
const AccentFailIcon_js_1 = require("../../ui/ConnectWallet/icons/AccentFailIcon.js");
const getConnectLocale_js_1 = require("../../ui/ConnectWallet/locale/getConnectLocale.js");
const LazyBuyScreen_js_1 = require("../../ui/ConnectWallet/screens/Buy/LazyBuyScreen.js");
const BuyTxHistory_js_1 = require("../../ui/ConnectWallet/screens/Buy/pay-transactions/BuyTxHistory.js");
const Modal_js_1 = require("../../ui/components/Modal.js");
const Spacer_js_1 = require("../../ui/components/Spacer.js");
const Spinner_js_1 = require("../../ui/components/Spinner.js");
const basic_js_1 = require("../../ui/components/basic.js");
const buttons_js_1 = require("../../ui/components/buttons.js");
const text_js_1 = require("../../ui/components/text.js");
const LoadingScreen_js_1 = require("../../wallets/shared/LoadingScreen.js");
const useActiveWallet_js_1 = require("../wallets/useActiveWallet.js");
const useSwitchActiveWalletChain_js_1 = require("../wallets/useSwitchActiveWalletChain.js");
/**
 * A hook to send a transaction.
 * @returns A mutation object to send a transaction.
 * @param config Configuration for the `useSendTransaction` hook.
 * Refer to [`SendTransactionConfig`](https://portal.thirdweb.com/references/typescript/v5/SendTransactionConfig) for more details.
 * @example
 * ```tsx
 * import { useSendTransaction } from "thirdweb/react";
 * const { mutate: sendTx, data: transactionResult } = useSendTransaction();
 *
 * // later
 * sendTx(tx);
 * ```
 *
 * @transaction
 */
function useSendTransaction(config = {}) {
    const activeWallet = (0, useActiveWallet_js_1.useActiveWallet)();
    const switchChain = (0, useSwitchActiveWalletChain_js_1.useSwitchActiveWalletChain)();
    const wallet = (0, useActiveWallet_js_1.useActiveWallet)();
    const payModal = config.payModal;
    let payModalEnabled = true;
    if (payModal === false || config.gasless) {
        payModalEnabled = false;
    }
    // TODO handle erc20 pay modal
    // if active wallet is smart wallet with gasless enabled, don't show the pay modal
    if (activeWallet && activeWallet.id === "smart") {
        const options = activeWallet.getConfig();
        if ("sponsorGas" in options && options.sponsorGas === true) {
            payModalEnabled = false;
        }
        if ("gasless" in options && options.gasless === true) {
            payModalEnabled = false;
        }
    }
    if (activeWallet && activeWallet.id === "inApp") {
        const options = activeWallet.getConfig();
        if (options && "smartAccount" in options && options.smartAccount) {
            const smartOptions = options.smartAccount;
            if ("sponsorGas" in smartOptions && smartOptions.sponsorGas === true) {
                payModalEnabled = false;
            }
            if ("gasless" in smartOptions && smartOptions.gasless === true) {
                payModalEnabled = false;
            }
        }
    }
    const setRootEl = (0, react_1.useContext)(RootElementContext_js_1.SetRootElementContext);
    return (0, useSendTransaction_js_1.useSendTransactionCore)({
        showPayModal: !payModalEnabled || payModal === false
            ? undefined
            : (data) => {
                const prefillBuy = data.currency && !(0, addresses_js_1.isNativeTokenAddress)(data.currency.address)
                    ? {
                        chain: data.tx.chain,
                        amount: (0, units_js_1.toTokens)(data.totalCostWei, data.currency.decimals),
                        token: data.currency,
                    }
                    : undefined;
                setRootEl((0, jsx_runtime_1.jsx)(TxModal, { title: payModal?.metadata?.title || "Buy", tx: data.tx, onComplete: data.sendTx, onClose: () => {
                        setRootEl(null);
                        data.rejectTx(new Error("User rejected transaction by closing modal"));
                    }, onTxSent: data.resolveTx, client: data.tx.client, localeId: payModal?.locale || "en_US", supportedTokens: payModal?.supportedTokens, theme: payModal?.theme || "dark", txCostWei: data.totalCostWei, walletBalance: data.walletBalance, payOptions: {
                        buyWithCrypto: payModal?.buyWithCrypto,
                        buyWithFiat: payModal?.buyWithFiat,
                        purchaseData: payModal?.purchaseData,
                        prefillBuy,
                    } }));
            },
        gasless: config.gasless,
        switchChain,
        wallet,
    });
}
function TxModal(props) {
    return ((0, jsx_runtime_1.jsx)(CustomThemeProvider_js_1.CustomThemeProvider, { theme: props.theme, children: (0, jsx_runtime_1.jsx)(Modal_js_1.Modal, { open: true, size: "compact", setOpen: (_open) => {
                if (!_open) {
                    props.onClose();
                }
            }, children: (0, jsx_runtime_1.jsx)(ModalContent, { ...props }) }) }));
}
function ModalContent(props) {
    const localeQuery = (0, getConnectLocale_js_1.useConnectLocale)(props.localeId);
    const [screen, setScreen] = (0, react_1.useState)("buy");
    if (!localeQuery.data) {
        return (0, jsx_runtime_1.jsx)(LoadingScreen_js_1.LoadingScreen, {});
    }
    if (screen === "execute-tx") {
        return ((0, jsx_runtime_1.jsx)(ExecutingTxScreen, { tx: props.tx, closeModal: props.onClose, onTxSent: props.onTxSent }));
    }
    if (screen === "tx-history") {
        return ((0, jsx_runtime_1.jsx)(BuyTxHistory_js_1.PayTxHistoryScreen, { title: props.title, client: props.client, onBack: () => {
                setScreen("buy");
            }, onDone: () => {
                setScreen("execute-tx");
            }, isBuyForTx: true, isEmbed: false }));
    }
    return ((0, jsx_runtime_1.jsx)(LazyBuyScreen_js_1.LazyBuyScreen, { title: props.title, isEmbed: false, client: props.client, onViewPendingTx: () => {
            setScreen("tx-history");
        }, supportedTokens: props.supportedTokens, connectLocale: localeQuery.data, buyForTx: {
            balance: props.walletBalance.value,
            cost: props.txCostWei,
            tx: props.tx,
            tokenSymbol: props.walletBalance.symbol,
            tokenDecimals: props.walletBalance.decimals,
        }, theme: typeof props.theme === "string" ? props.theme : props.theme.type, payOptions: props.payOptions, onDone: () => {
            setScreen("execute-tx");
        }, connectOptions: undefined, onBack: undefined }));
}
function ExecutingTxScreen(props) {
    const sendTxCore = useSendTransaction({
        payModal: false,
    });
    const [status, setStatus] = (0, react_1.useState)("loading");
    const sendTx = (0, react_1.useCallback)(async () => {
        setStatus("loading");
        try {
            const txData = await sendTxCore.mutateAsync(props.tx);
            props.onTxSent(txData);
            setStatus("sent");
        }
        catch (e) {
            // Do not reject the transaction here, because the user may want to try again
            // we only reject on modal close
            console.error(e);
            setStatus("failed");
        }
    }, [sendTxCore, props.tx, props.onTxSent]);
    const done = (0, react_1.useRef)(false);
    (0, react_1.useEffect)(() => {
        if (done.current) {
            return;
        }
        done.current = true;
        sendTx();
    }, [sendTx]);
    return ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { p: "lg", children: [(0, jsx_runtime_1.jsx)(basic_js_1.ModalHeader, { title: "Transaction" }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xxl" }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xxl" }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", center: "x", children: [status === "loading" && (0, jsx_runtime_1.jsx)(Spinner_js_1.Spinner, { size: "3xl", color: "accentText" }), status === "failed" && (0, jsx_runtime_1.jsx)(AccentFailIcon_js_1.AccentFailIcon, { size: index_js_1.iconSize["3xl"] }), status === "sent" && ((0, jsx_runtime_1.jsx)(basic_js_1.Container, { color: "success", flex: "row", center: "both", children: (0, jsx_runtime_1.jsx)(react_icons_1.CheckCircledIcon, { width: index_js_1.iconSize["3xl"], height: index_js_1.iconSize["3xl"] }) }))] }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "lg" }), (0, jsx_runtime_1.jsxs)(text_js_1.Text, { color: "primaryText", center: true, size: "lg", children: [status === "loading" && "Sending transaction", status === "failed" && "Transaction failed", status === "sent" && "Transaction sent"] }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "sm" }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { color: "danger", center: true, size: "sm", children: status === "failed" && sendTxCore.error
                    ? sendTxCore.error.message
                    : "" }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xxl" }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xxl" }), status === "failed" && ((0, jsx_runtime_1.jsx)(buttons_js_1.Button, { variant: "accent", fullWidth: true, onClick: sendTx, children: "Try Again" })), status === "sent" && ((0, jsx_runtime_1.jsx)(buttons_js_1.Button, { variant: "accent", fullWidth: true, onClick: props.closeModal, children: "Done" }))] }));
}
//# sourceMappingURL=useSendTransaction.js.map